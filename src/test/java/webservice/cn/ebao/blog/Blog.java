package webservice.cn.ebao.blog;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.8
 * 2016-03-17T19:10:34.736+08:00
 * Generated source version: 3.0.8
 * 
 */
@WebServiceClient(name = "blog", 
                  wsdlLocation = "http://blog.e-baotong.cn/ws/blog.asmx?WSDL",
                  targetNamespace = "http://www.e-bao.cn/") 
public class Blog extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.e-bao.cn/", "blog");
    public final static QName BlogHttpPost = new QName("http://www.e-bao.cn/", "blogHttpPost");
    public final static QName BlogSoap = new QName("http://www.e-bao.cn/", "blogSoap");
    public final static QName BlogSoap12 = new QName("http://www.e-bao.cn/", "blogSoap12");
    public final static QName BlogHttpGet = new QName("http://www.e-bao.cn/", "blogHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://blog.e-baotong.cn/ws/blog.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Blog.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://blog.e-baotong.cn/ws/blog.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public Blog(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Blog(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Blog() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Blog(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Blog(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Blog(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    /**
     *
     * @return
     *     returns BlogHttpPost
     */
    @WebEndpoint(name = "blogHttpPost")
    public BlogHttpPost getBlogHttpPost() {
        return super.getPort(BlogHttpPost, BlogHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BlogHttpPost
     */
    @WebEndpoint(name = "blogHttpPost")
    public BlogHttpPost getBlogHttpPost(WebServiceFeature... features) {
        return super.getPort(BlogHttpPost, BlogHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns BlogSoap
     */
    @WebEndpoint(name = "blogSoap")
    public BlogSoap getBlogSoap() {
        return super.getPort(BlogSoap, BlogSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BlogSoap
     */
    @WebEndpoint(name = "blogSoap")
    public BlogSoap getBlogSoap(WebServiceFeature... features) {
        return super.getPort(BlogSoap, BlogSoap.class, features);
    }
    /**
     *
     * @return
     *     returns BlogSoap
     */
    @WebEndpoint(name = "blogSoap12")
    public BlogSoap getBlogSoap12() {
        return super.getPort(BlogSoap12, BlogSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BlogSoap
     */
    @WebEndpoint(name = "blogSoap12")
    public BlogSoap getBlogSoap12(WebServiceFeature... features) {
        return super.getPort(BlogSoap12, BlogSoap.class, features);
    }
    /**
     *
     * @return
     *     returns BlogHttpGet
     */
    @WebEndpoint(name = "blogHttpGet")
    public BlogHttpGet getBlogHttpGet() {
        return super.getPort(BlogHttpGet, BlogHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BlogHttpGet
     */
    @WebEndpoint(name = "blogHttpGet")
    public BlogHttpGet getBlogHttpGet(WebServiceFeature... features) {
        return super.getPort(BlogHttpGet, BlogHttpGet.class, features);
    }

}
